// Add various requirements.
var http = require('http'),
    https = require('https'),
    connect = require('connect'),
    httpProxy = require('http-proxy');
var fs = require('fs');
var esprima = require('esprima');
var escodegen = require('escodegen');
var estraverse = require('estraverse');

if (!obj){
  var obj = {
    "resolution" : 0,
    "gamut" : 0,
    "color_depth" : 0,
    "cpu" : 0,
    "contrast" : 0,
    "memory" : 0,
    "concurrency" : 0,
    "hdr" : 0,
    "inverted_colors" : 0,
    "color_depth" : 0
  };
}

// Information for injecting the javascript code.
var selects = [];
var simpleselect = {};
var blocks = [];

// On scripts, we gather the code and add various injected pieces as necessary
simpleselect.query = 'script';
simpleselect.func = function (node) {
  var input = '';    
  //console.log("start input" + input);

  var readStream = node.createReadStream();
  var writeStream = node.createWriteStream();

  // Read in data from the stream
  readStream.on('data', function(data){
    input += data.toString();
  })

  // Once we are done reading data, we can run our analysis
  readStream.on('end', function(){
    var ast = esprima.parse(input);

    estraverse.traverse(ast, {
      enter: enter,
      leave: leave
    });

    for (var key in obj){
      console.log(`${key} count: ${obj[key]}`);
    }
    // In download, we simply do a static analysis, so we
    // pass the input back into the output. 
    writeStream.end(input);
  });
}

selects.push(simpleselect);

// We connect to the server via our proxy. 
var app = connect();

// Set up our proxy
var site = "www.google.com";
var proxy = httpProxy.createProxyServer({
   target: 'https://' + site,
   agent  : https.globalAgent, 
   headers:{ host: site }
})


app.use(require('../')([], selects, true));

app.use(
  function (req, res) {
    proxy.web(req, res);
  }
);

http.createServer(app).listen(8000);

// Enter and exit are used to check for fingerprinting
function enter(node){
  if (node.type === 'Identifier'){
    if (node.name.includes('height') || node.name.includes('width')){
      obj["resolution"] += 1;
    } else if (node.name.includes('oscpu') || node.name.includes('cpuClass') || node.name.includes('platform')) {
      obj["cpu"] += 1;
    } else if (node.name.includes('deviceMemory')){
      obj["memory"] += 1;
    } else if (node.name.includes('hardwareConcurrency')){
      obj["concurrency"] += 1;
    } else if (node.name.includes('colorDepth')){
      obj["color_depth"] += 1;
    }
  } else if (node.type === 'TemplateElement'){
    if (node.value.raw.includes('color-gamut')){
      obj["gamut"] += 1;
    } else if (node.value.raw.includes('prefers-contrast')){
      obj["contrast"] += 1;
    } else if (node.value.raw.includes('dynamic-range')){
      obj["hdr"] += 1;
    } else if (node.value.raw.includes('inverted-colors')){
      obj["inverted_colors"] += 1;
    }
  }
}

function leave(node){
}
